// solution for question 40 of leetcode 
// through recursion and backtracking 
class Solution {

private:
    void solve(vector<int>&candidates,int target,vector<int>&temp,vector<vector<int>>&ans,int idx,long long int total)
    {
        if(total>target)
        {
            return ;
        }
        if(total==target)
        {
            ans.push_back(temp);
            return ;
        }
        for(int i=idx;i<candidates.size();i++)
        {
            if(i>idx && candidates[i]==candidates[i-1])continue;
            temp.push_back(candidates[i]);
            solve(candidates,target,temp,ans,i+1,total+candidates[i]);
            temp.pop_back();
        }
    }

public:
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        vector<int>temp;
        vector<vector<int>>ans;
        long long int idx=0;
        long long int total=0;
        sort(candidates.begin(),candidates.end());
        solve(candidates,target,temp,ans,idx,total);
        return ans;
    }
};
